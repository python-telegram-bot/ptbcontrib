# 1. –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import sys
import json
import logging
import asyncio
import re
from datetime import datetime

# 2. –ò–º–ø–æ—Ä—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import aiohttp
import nest_asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# 3. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_files = [
    "C:/telegram_bot/TELEGRAM_BOT_TOKEN.env",
    "C:/telegram_bot/MULTIBANK.env",
    "C:/telegram_bot/FAKTURA_TOKEN.env",
    "C:/telegram_bot/E-DOC.env",
    "C:/telegram_bot/SOLIQ_API_KEY.env"
]

for env_file in env_files:
    if os.path.exists(env_file):
        load_dotenv(env_file)
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# 4. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MULTIBANK_BASE_URL = os.getenv("MULTIBANK_BASE_URL")
API_KEY = os.getenv("API_KEY")

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
if not MULTIBANK_BASE_URL:
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: MULTIBANK_BASE_URL –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
if not API_KEY:
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: API_KEY –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥–æ–µ .env
for env_file in env_files:
    if os.path.exists(env_file):
        load_dotenv(env_file)
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ –≥–ª–∞–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª—ã.")
else:
    print(f"‚úÖ –¢–æ–∫–µ–Ω Telegram –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:5]}... (—Å–∫—Ä—ã—Ç–æ)")

print("TELEGRAM_BOT_TOKEN:", os.getenv("TELEGRAM_BOT_TOKEN"))
print("MULTIBANK_BASE_URL:", os.getenv("MULTIBANK_BASE_URL"))
print("API_KEY:", os.getenv("API_KEY"))

async def get_multibank_data(company_tin: str, data_type: str, refresh: bool = True):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ Multibank API.
    
    :param company_tin: –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ (—Å—Ç—Ä–æ–∫–∞)
    :param data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö ('court', 'license', 'marks')
    :param refresh: –û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ (True/False)
    :return: JSON-–æ—Ç–≤–µ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    MULTIBANK_BASE_URL = os.getenv("MULTIBANK_BASE_URL")
    url = f"{MULTIBANK_BASE_URL}/{data_type}/{company_tin}?refresh={str(refresh).lower()}"
        
    auth = aiohttp.BasicAuth(MULTIBANK_USERNAME, MULTIBANK_PASSWORD)

    try:
        async with aiohttp.ClientSession(auth=auth) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return {"error": f"–û—à–∏–±–∫–∞ {response.status}: {await response.text()}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"}

async def check_multibank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_multibank."""
    if not context.args:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ò–ù–ù –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n`/check_multibank 123456789`", parse_mode="Markdown")
        return

    company_tin = context.args[0].strip()
    if not company_tin.isdigit() or len(company_tin) != 9:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 9 —Ü–∏—Ñ—Ä.")
        return

    await update.message.reply_text("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Multibank API
    court_data = await get_multibank_data(company_tin, "court")
    license_data = await get_multibank_data(company_tin, "license")
    marks_data = await get_multibank_data(company_tin, "marks")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üìå *–î–∞–Ω–Ω—ã–µ –ø–æ –ò–ù–ù {company_tin}:*\n\n"

    # –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞
    if "error" not in court_data and court_data.get("court"):
        response += f"‚öñÔ∏è–°—É–¥–µ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏: {len(court_data['court'])} –Ω–∞–π–¥–µ–Ω–æ\n"
        for case in court_data["court"][:30]:
            response += f"üîπ –î–µ–ª–æ ‚Ññ{case.get('court_case_number', '‚Äî')} ({case.get('court_hearing_date', '‚Äî')})\n"
        response += "\n"
    else:
        response += "‚öñÔ∏è–°—É–¥–µ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    # –õ–∏—Ü–µ–Ω–∑–∏–∏
    if "error" not in license_data and license_data.get("license"):
        response += f"üóû–õ–∏—Ü–µ–Ω–∑–∏–∏: {len(license_data['license'])} –Ω–∞–π–¥–µ–Ω–æ\n"
        for lic in license_data["license"][:30]:
            response += f"üîπ {lic.get('license_name', '‚Äî')} (‚Ññ{lic.get('license_number', '‚Äî')})\n"
        response += "\n"
    else:
        response += "üìú –õ–∏—Ü–µ–Ω–∑–∏–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

    # –¢–æ—Ä–≥–æ–≤—ã–µ –∑–Ω–∞–∫–∏
    if "error" not in marks_data and marks_data.get("marks"):
        response += f"‚Ñ¢ –¢–æ—Ä–≥–æ–≤—ã–µ –∑–Ω–∞–∫–∏: {len(marks_data['marks'])} –Ω–∞–π–¥–µ–Ω–æ\n"
        for mark in marks_data["marks"][:30]:
            response += f"üîπ {mark.get('ima_marks_name', '‚Äî')} (‚Ññ{mark.get('ima_marks_number', '‚Äî')})\n"
        response += "\n"
    else:
        response += "‚Ñ¢ –¢–æ—Ä–≥–æ–≤—ã–µ –∑–Ω–∞–∫–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

    await update.message.reply_text(response, parse_mode="Markdown")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª–∞–º
BASE_DIR = os.getcwd()  
file_path = os.path.join(BASE_DIR, "opf.json")  
translations_path = os.path.join(BASE_DIR, "translations.json")

# –ó–∞–≥—Ä—É–∂–∞–µ–º OPF JSON –±–µ–∑–æ–ø–∞—Å–Ω–æ
try:
    with open(file_path, "r", encoding="utf-8") as f:
        OPF_DATA = json.load(f)
except Exception as e:
    OPF_DATA = {}
    print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ opf.json: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OPF
def get_opf_name(opf_code):
    return OPF_DATA.get(str(opf_code), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
try:
    with open(translations_path, "r", encoding="utf-8") as f:
        TRANSLATIONS = json.load(f)
except Exception as e:
    TRANSLATIONS = {}
    print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ translations.json: {e}")

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = "https://data.egov.uz/apiPartner/Partner/WebService"

logger = logging.getLogger(__name__)
async def fetch_dominant_company_info(inn: str):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù —á–µ—Ä–µ–∑ API data.egov.uz.
    """
    url = f"https://data.egov.uz/api/market-dominance/{inn}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                logger.info(f"üì¢ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –¥–ª—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ ({inn}): {json.dumps(data, ensure_ascii=False, indent=2)}")

                return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ API
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API data.egov.uz: {e}")
        return None

async def check_dominant_company(inn: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —á–µ—Ä–µ–∑ API data.egov.uz.
    """
    params = {
        "token": API_TOKEN,
        "name": "2-009-0017",
        "offset": 0,
        "limit": 100,  # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–∞–∑—É 100 –∑–∞–ø–∏—Å–µ–π
        "lang": "uz"
    }
    logger = logging.getLogger(__name__)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, params=params) as response:
                if response.status != 200:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API ({response.status}): {await response.text()}")
                    return False
                
                data = await response.json()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                logger = logging.getLogger(__name__)
                logger.info(f"üì¢ –û—Ç–≤–µ—Ç API –¥–ª—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π: {json.dumps(data, ensure_ascii=False, indent=2)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–≤–µ—Ç–µ API
                if not data or "result" not in data or "data" not in data["result"]:
                    logger.warning("‚ö† API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    return False

                # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ò–ù–ù (STIR)
                for company in data["result"]["data"]:
                    if str(company.get("STIR")) == str(inn):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ò–ù–ù –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                        logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è {inn} –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö!")
                        return True
                
                logger.info(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö.")
                return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API data.egov.uz: {e}")
        return False

def translate_activity(activity_uz):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —É–∑–±–µ–∫—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."""
    return TRANSLATIONS.get(activity_uz, activity_uz)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    encoding="utf-8"  # –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
)



# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if API_TOKEN is None:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
API_KEY = os.getenv("API_KEY")  # –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
OWNER_ID = 6116094248  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API

async def fetch_company_info(inn):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù."""
    url = f"https://my3.soliq.uz/api/remote-access-api/company/info/{inn}?type=full"
    headers = {
        "X-API-KEY": API_KEY,
        "Accept": "application/json"
    }

    timeout = aiohttp.ClientTimeout(total=10)  # ‚è≥ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 10 —Å–µ–∫

    async with semaphore:  # ‚ö° –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("error") and data["error"].get("rusText") == "Table Not Found":
                            return "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –ò–ù–ù –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ."
                        return data
                    else:  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π if –∏ –ø—Ä–∞–≤–∏–º –æ—Ç—Å—Ç—É–ø—ã
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}, {await response.text()}")
                        return None
        except asyncio.TimeoutError:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return None


async def fetch_entrepreneur_info(pinfl):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ –ø–æ –ü–ò–ù–§–õ, —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤."""
    url = f"https://my3.soliq.uz/api/remote-access-api/entrepreneur/info/{pinfl}"
    headers = {
        "X-API-KEY": API_KEY,
        "Accept": "application/json"
    }
    
    timeout = aiohttp.ClientTimeout(total=10)  # –¢–∞–π–º–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥

    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                try:
                    async with session.get(url, headers=headers) as response:
                        if response.status == 200:
                            return await response.json()  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                        else:
                            error_text = await response.text()
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}, {error_text}")
                            return None
                except aiohttp.ClientResponseError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ API: {e.status} - {e.message}")
                except aiohttp.ClientConnectionError:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
                except aiohttp.ClientPayloadError:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
        except asyncio.TimeoutError:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
async def check_inn(inn: str) -> str:
    if not (isinstance(inn, str) and inn.isdigit() and len(inn) == 9):
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 9 —Ü–∏—Ñ—Ä."

    company_info = await fetch_company_info(inn)  # ‚¨ÖÔ∏è –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è API
    logger.debug(f"üì¢ –û—Ç–≤–µ—Ç API –≤ check_inn: {company_info}")

    if not company_info or not isinstance(company_info, dict):
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: company_info = {company_info}")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return "‚ùå –û—à–∏–±–∫–∞: –Æ—Ä.–ª–∏—Ü–æ —Å —Ç–∞–∫–∏–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    if "error" in company_info and isinstance(company_info["error"], dict):
        error_text = company_info["error"].get("rusText", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {error_text}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é –æ—à–∏–±–∫—É API
        return f"‚ùå –û—à–∏–±–∫–∞ API: {error_text}"

    response = await format_company_response(company_info)
    return response
       
async def send_large_message(update, text):
    max_length = 4096  # –õ–∏–º–∏—Ç Telegram

    try:
        if not isinstance(text, str):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text ‚Äî —Å—Ç—Ä–æ–∫–∞
            text = str(text)

        logger.info(f"üì© –î–ª–∏–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É

        messages = [text[i:i+max_length] for i in range(0, len(text), max_length)]
        for msg in messages:
            msg = msg.strip().replace("\u200e", "").replace("\u202e", "")
            await update.message.reply_text(msg)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = text.split("\n")
        message = ""

        for line in lines:
            if len(message) + len(line) + 1 > max_length:
                logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
                await update.message.reply_text(message)
                message = ""

            message += line + "\n"

        if message:
            logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_pinfl(pinfl):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ü–ò–ù–§–õ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ò–ü."""
    if isinstance(pinfl, str) and len(pinfl) == 14 and pinfl.isdigit():
        try:
            response = await fetch_entrepreneur_info(pinfl)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if not response or not isinstance(response, dict):
            return "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ –ü–ò–ù–§–õ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        # üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        pinfl_masked = mask_pinfl(response.get("pinfl", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
        registration_date = response.get("registrationDate", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        begin_date = response.get("beginDate", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        end_date = response.get("endDate", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        if end_date == "01.01.3000":
            end_date = "–ë–µ–∑ —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"

        # üîπ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∞–¥—Ä–µ—Å
        activity_uz = response.get("activityTypeName", {}).get("uz")
        activity_ru = translate_activity(activity_uz) if activity_uz else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        activity = activity_ru if activity_ru != activity_uz else activity_uz or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        address = response.get("entrepreneurshipAddress", {}).get("address", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        # üîπ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        director = response.get("entrepreneurshipDirector") or {}
        director_last = director.get("lastName", "").strip()
        director_first = director.get("firstName", "").strip()
        director_middle = director.get("middleName", "").strip()
        director_full = " ".join(filter(None, [director_last, director_first, director_middle])) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        phone_data = response.get("entrepreneurshipContact")
        phone = str(phone_data.get("phoneNumber", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")).strip() if phone_data and isinstance(phone_data, dict) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # üîπ –ù–∞–ª–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status = response.get("status", {}).get("name", {}).get("uz") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        is_vat_taxpayer = response.get("isVatTaxpayer")
        vat_status = "–Ø–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–º –ù–î–°" if is_vat_taxpayer else "–ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–º –ù–î–°"
        tax_mode = response.get("taxModeName", {}).get("ru") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        taxpayer_type = response.get("taxpayerTypeName", {}).get("ru") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        return (
            f"üìå –ü–ò–ù–§–õ: {pinfl_masked}\n"
            f"üë§ –§–ò–û –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è: {director_full}\n"
            f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
            f"üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {begin_date}\n"
            f"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
            f"üíº –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {activity}\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {phone}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìú –ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: {tax_mode}\n"
            f"üÜî –¢–∏–ø –Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {taxpayer_type}\n"
            f"üìú –ù–î–°: {vat_status}"
        )

    return "‚ùå –ò–ü —Å —Ç–∞–∫–∏–º –ü–ò–ù–§–õ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."


MCHJ_VARIANTS = [
    "MAS'ULIYATI CHEKLANGAN JAMIYAT",
    "Mas ºuliyati cheklangan jamiyat",
    "MAS‚ÄòULIYATI CHEKLANGAN YOKI QO‚ÄòSHIMCHA MAS‚ÄòULIYATLI JAMIYAT",
    "MCHJ"
]

from datetime import datetime

def pluralize_years(years):
    return f"{years} " + ("–ª–µ—Ç" if 11 <= years % 100 <= 19 or years % 10 in [0, 5, 6, 7, 8, 9] else "–≥–æ–¥–∞" if years % 10 in [2, 3, 4] else "–≥–æ–¥")

def calculate_company_age(registration_date):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–æ–∫ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –≥–æ–¥–∞—Ö –∏ –¥–Ω—è—Ö.
    :param registration_date: —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DD.MM.YYYY" –∏–ª–∏ "YYYY-MM-DD"
    :return: —Å—Ç—Ä–æ–∫–∞ "X –ª–µ—Ç Y –¥–Ω–µ–π" –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    """
    if not registration_date or registration_date in ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚Äî", ""]:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if "." in registration_date:  # –§–æ—Ä–º–∞—Ç "DD.MM.YYYY"
            reg_date = datetime.strptime(registration_date, "%d.%m.%Y").date()
        elif "-" in registration_date:  # –§–æ—Ä–º–∞—Ç "YYYY-MM-DD"
            reg_date = datetime.strptime(registration_date, "%Y-%m-%d").date()
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        today = datetime.today().date()
        delta = today - reg_date

        from dateutil.relativedelta import relativedelta
        years = relativedelta(today, reg_date).years
        days = (today - (reg_date + relativedelta(years=years))).days
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ "–≥–æ–¥", "–≥–æ–¥–∞" –∏–ª–∏ "–ª–µ—Ç"
        years_text = pluralize_years(years)

        return f"{years_text} {days} –¥–Ω–µ–π" if years > 0 else f"{days} –¥–Ω–µ–π"
    except ValueError:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
import re

# –°–ø–∏—Å–æ–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–±–∏—Ä–∞—Ç—å
LEGAL_FORMS = ["–û–û–û", "–ê–û", "–ú–ß–ñ", "–°–ü", "–ó–ê–û", "–ì–£–ü", "–ß–ü", "–î–ü"]

def extract_company_name(full_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —É–±–∏—Ä–∞—è –∫–∞–≤—ã—á–∫–∏ –∏ —é—Ä. —Ñ–æ—Ä–º—É."""
    if not full_name:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # 1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    match = re.search(r'"([^"]+)"', full_name)
    if match:
        return match.group(1)  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–≤—ã—á–µ–∫

    # 2Ô∏è‚É£ –ï—Å–ª–∏ –∫–∞–≤—ã—á–µ–∫ –Ω–µ—Ç, —É–±–∏—Ä–∞–µ–º —é—Ä. —Ñ–æ—Ä–º—É (–û–û–û, –ú–ß–ñ –∏ —Ç. –¥.)
    words = full_name.split()
    words = [word for word in words if word not in LEGAL_FORMS]  # –£–±–∏—Ä–∞–µ–º —é—Ä. —Ñ–æ—Ä–º—É
    return " ".join(words).strip() if words else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

# –£—Ç–∏–ª–∏—Ç—ã
def mask_pinfl(pinfl):
    return f"{pinfl[0]}{'*' * 12}{pinfl[-1]}" if str(pinfl).isdigit() and len(pinfl) == 14 else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ü–ò–ù–§–õ"

def validate_pinfl(pinfl):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ü–ò–ù–§–õ —Å–æ—Å—Ç–æ–∏—Ç –º–∞–∫—Å–∏–º—É–º –∏–∑ 14 —Ü–∏—Ñ—Ä –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ."""
    pinfl = str(pinfl).strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ

    if not pinfl.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        return None  

    if len(pinfl) > 14:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 14 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äì –æ–±—Ä–µ–∑–∞–µ–º
        pinfl = pinfl[:14]

    return pinfl if len(pinfl) == 14 else None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–≤–Ω–æ 14 —Ü–∏—Ñ—Ä
   
def format_full_name(name):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –§–ò–û –∫ —Ñ–æ—Ä–º–∞—Ç—É: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ."""
    if not name or name == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    parts = name.split()

    if len(parts) == 3:  # –ï—Å–ª–∏ —Ç—Ä–∏ —Å–ª–æ–≤–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ)
        return f"{parts[1]} {parts[0]} {parts[2]}"  # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é
    elif len(parts) == 2:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ò–º—è –§–∞–º–∏–ª–∏—è
        return f"{parts[1]} {parts[0]}"
    
    return name  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    
def format_founder(founder):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –ò–ù–ù."""
    tin = founder.get('tin', '')
    name = founder.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    share = founder.get('sharePersent', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    cleaned_name = name  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if tin.isdigit():
        if len(tin) == 14:  # –§–∏–∑–ª–∏—Ü–æ (–ò–ù–ù 14 —Ü–∏—Ñ—Ä)
            return f"üîπ {format_full_name(name)} (–î–æ–ª—è: {share}%)"

    elif len(tin) == 9:
        cleaned_name = clean_company_name(name)

        if tin.startswith('2') or tin.startswith('3'):
            return f"üîπ {cleaned_name} (–ò–ù–ù: {tin}, –î–æ–ª—è: {share}%)"
        elif tin.startswith('9'):
            return f"üîπ {cleaned_name} (–ò–ù–ù: {tin}, –î–æ–ª—è: {share}%)"

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —É—Å–ª–æ–≤–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    return f"üîπ {cleaned_name} (–ò–ù–ù: {tin}, –î–æ–ª—è: {share}%)"

# –ó–∞–≥—Ä—É–∂–∞–µ–º businessStructure.json
try:
    with open("businessStructure.json", "r", encoding="utf-8") as f:
        BUSINESS_STRUCTURE = json.load(f)
except Exception as e:
    BUSINESS_STRUCTURE = []
    print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ businessStructure.json: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ businessStructure –ø–æ –∫–æ–¥—É
def get_business_structure_name(code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –∫–æ–¥—É –∏–∑ API."""
    for entry in BUSINESS_STRUCTURE:
        if entry["CODE"] == code:
            return entry["NAME_RU"]  # –ë–µ—Ä—ë–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def format_company_response(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    response = ""
    company = data.get('company', {}) or {}

    # üõë –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    logger.info(f"üì¢ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ format_company_response: {json.dumps(data, ensure_ascii=False, indent=2)}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    is_dominant = await check_dominant_company(company.get('tin', ''))
    company_name = extract_company_name(company.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    
    director = data.get('director', {}) or {}
    director_contact = data.get('directorContact', {}) or {}
    phone_director = director_contact.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    accountant = data.get('accountant', {}) or {}
    accountant_contact = data.get('accountantContact', {}) or {}
    founders = data.get('founders', []) or []
    company_contact = company.get('companyContact', {}) or {}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –û–ü–§
    opf_code = company.get("opf", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    opf_name = get_opf_name(opf_code)  # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–ü–§

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –û–ö–≠–î
    oked_code = company.get("oked", "–ù–µ —É–∫–∞–∑–∞–Ω")

    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    activity_uz = company.get('okedDetail', {}).get('name_uz', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    activity_ru = company.get('okedDetail', {}).get('name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    activity = activity_ru if activity_ru != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else activity_uz

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –û–ü–§ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–∞–≤—ã—á–∫–∞–º–∏
    business_structure_code = company.get("businessStructure", None)
    business_structure_name = get_business_structure_name(business_structure_code)
    formatted_name = f'{business_structure_name} "{company_name}"'
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏
    company_status = company.get("status", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∏ –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    liquidation_date = company.get("liquidationDate", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    status_updated = company.get("statusUpdated", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    liquidation_info = ""
    if liquidation_date != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
        liquidation_info = f"üìÖ –î–∞—Ç–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {liquidation_date}\n"
    if status_updated != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
        liquidation_info += f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_updated}\n"
        
    # –¢–µ–ª–µ—Ñ–æ–Ω –∏ Email –∏–∑ directorContact
    phone = director_contact.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    email = director_contact.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    # –ù–î–°
    raw_vat_status = company.get('vatStatus', '')
    vat_status = raw_vat_status  # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º risk_message, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ UnboundLocalError
    risk_message = ""

    if vat_status in [None, ""]:
        vat_status = "–ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–º –ù–î–°"
    elif vat_status == "ACTIVE":
        vat_status = "‚úÖ–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∞–∫—Ç–∏–≤–Ω—ã–π‚úÖ"
    elif vat_status == "SUSPENDED":
        vat_status = '‚õî –£ –∫–æ–º–ø–∞–Ω–∏–∏ "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" –ù–î–°!'
        risk_message = (
            "‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –ù–î–° –∫–æ–º–ø–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!\n"
            "üìå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            " üÜò –ö–æ–º–ø–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n"
            " üí∞ –í–æ–∑–º–æ–∂–Ω—ã –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\n"
            " üè¢ –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤.\n"
            "üîé –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±–µ."
        )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    print(f"[DEBUG] –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ù–î–°: {risk_message}")  # –¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å (Billing Address)
    billing_address = data.get("companyBillingAddress", {})

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    region = billing_address.get("region", {}).get("name_ru", "")
    district = billing_address.get("district", {}).get("name_ru", "")
    street = billing_address.get("streetName", "")
    postcode = billing_address.get("postcode", "")

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
    logger.info(f"üìç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: {billing_address}")

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–∞
    address_parts = [region, district, street]
    company_address = ", ".join(filter(None, address_parts)).strip()

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–¥—Ä–µ—Å
    logger.info(f"üìç –ò—Ç–æ–≥–æ–≤—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {company_address}")

    print(f"–ò—Ç–æ–≥–æ–≤—ã–π –∞–¥—Ä–µ—Å: {company_address}")

    # –î–∞—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_date = company.get("registrationDate", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    if registration_date and registration_date not in ["–ù–µ —É–∫–∞–∑–∞–Ω–æ", ""]:
        registration_date = f"{registration_date} –≥."

    # –î–∞—Ç–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    reregistration_date = company.get("reregistrationDate", "")
    if reregistration_date:
        reregistration_date = f"{reregistration_date} –≥."
    else:
        reregistration_date = "‚Äî"

    # –ù–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_number = company.get("registrationNumber", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    # –°—á–∏—Ç–∞–µ–º —Å—Ä–æ–∫ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    company_age = calculate_company_age(company.get("registrationDate", ""))
        
    # –õ–æ–≥–∏—Ä—É–µ–º API-–æ—Ç–≤–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
    logger.debug("üì¢ –û—Ç–≤–µ—Ç API", extra={"data": data})

    # –ë–µ—Ä—ë–º avgNumberEmployees –Ω–∞–ø—Ä—è–º—É—é –∏–∑ data, –∞ –ù–ï –∏–∑ company
    employees = data.get('companyExtraInfo', {}).get('avgNumberEmployees')

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"üë• avgNumberEmployees (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {employees}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ employees ‚Äî —á–∏—Å–ª–æ, –∏–Ω–∞—á–µ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    employees = str(employees) if isinstance(employees, (int, float)) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {employees}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞
    business_fund = f"{int(company.get('businessFund', 0)):,} —Å—É–º".replace(",", " ")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π
    founders_info = "\n".join(f"üîπ {format_founder(f)}" for f in founders[:10]) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vat_number = company.get('vatNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    business_type = company.get('businessTypeDetail', {}).get('name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π (–¥–æ 10)
    max_founders_display = 10  
    extra_founders = max(0, len(founders) - max_founders_display)

    founders_info = "\n".join([format_founder(founder) for founder in founders[:10]])

    if extra_founders:
        founders_info = (founders_info + "\n" if founders_info else "") + f"...–∏ –µ—â–µ {extra_founders} —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π."

    if not founders_info:
        founders_info = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–ù–µ —É–∫–∞–∑–∞–Ω–æ –ù–µ —É–∫–∞–∑–∞–Ω–æ –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    buh_first = accountant.get('firstName', '').strip()
    buh_last = accountant.get('lastName', '').strip()
    buh_middle = accountant.get('middleName', '').strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
    if any([buh_first, buh_last, buh_middle]):
        buh_full = " ".join(filter(None, [buh_last, buh_first, buh_middle])).strip()
    else:
        buh_full = "–ù–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
    buh_phone = accountant_contact.get('phone', '').strip()
    if not buh_phone:
        buh_phone = "–ù–µ—Ç"

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏
    company_status = company.get("statusDetail", {}).get("name_ru", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
       
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º response
    registration_date = company.get("registrationDate", "")
    company_age = calculate_company_age(registration_date)

    # –ü–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º "–≥.", —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ
    if registration_date:
        registration_date = f"{registration_date} –≥."

    # üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Multibank API
    court_data = await get_multibank_data(company.get("tin", ""), "court")
    license_data = await get_multibank_data(company.get("tin", ""), "license")
    marks_data = await get_multibank_data(company.get("tin", ""), "marks")

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å —Å—É–¥–µ–±–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏
    if "error" not in court_data and court_data.get("court"):
        response += "\n=== ‚öñÔ∏è –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞ ===\n"
        for case in court_data["court"][:3]:  # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 3 –¥–µ–ª–∞
            response += (
                f"üîπ –î–µ–ª–æ ‚Ññ{case.get('court_case_number', '‚Äî')}, {case.get('court_hearing_date', '‚Äî')}\n"
                f"üìå –°—É–¥: {case.get('court_name', '‚Äî')}\n"
                f"‚öî –ò—Å—Ç–µ—Ü: {case.get('court_claimant', '‚Äî')}\n"
                f"‚öñ –û—Ç–≤–µ—Ç—á–∏–∫: {case.get('court_defendant', '‚Äî')}\n"
                f"üìú –°—Ç–∞—Ç—å—è: {case.get('court_article', '‚Äî')}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è: {case.get('court_hearing_date', '‚Äî')} {case.get('court_hearing_time', '‚Äî')}\n"
                f"üèõ –°—É–¥—å—è: {case.get('court_judge', '‚Äî')}\n"
                f"üìú –†–µ–∑—É–ª—å—Ç–∞—Ç: {case.get('court_result', '‚Äî')}\n\n"
            )
    else:
        response += "‚öñÔ∏è –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏
    if "error" not in license_data and license_data.get("license"):
        response += "\n=== üìú –õ–∏—Ü–µ–Ω–∑–∏–∏ ===\n"
        for lic in license_data["license"][:3]:  # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 3 –ª–∏—Ü–µ–Ω–∑–∏–∏
            response += (
                f"üîπ {lic.get('license_name', '‚Äî')} (‚Ññ{lic.get('license_number', '‚Äî')})\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {lic.get('license_registration_date', '‚Äî')}\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {lic.get('license_expiry_date', '‚Äî')}\n"
                f"üèõ –û—Ä–≥–∞–Ω: {lic.get('license_organization', '‚Äî')}\n\n"
            )
    else:
        response += "üìú –õ–∏—Ü–µ–Ω–∑–∏–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
    if "error" not in marks_data and marks_data.get("marks"):
        response += "\n=== ‚Ñ¢ –¢–æ—Ä–≥–æ–≤—ã–µ –∑–Ω–∞–∫–∏ ===\n"
        for mark in marks_data["marks"][:3]:  # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 3 –¢–ó
            response += (
                f"üîπ {mark.get('ima_marks_name', '‚Äî')} (‚Ññ{mark.get('ima_marks_number', '‚Äî')})\n"
            )
    else:
        response += "‚Ñ¢ –¢–æ—Ä–≥–æ–≤—ã–µ –∑–Ω–∞–∫–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    logger.info(f"üì¢ –î–∞–Ω–Ω—ã–µ Multibank –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç: {response}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = (
        f"üîπ {formatted_name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {company_address}\n"
        f"‚öîÔ∏è –°—Ç–∞—Ç—É—Å —Å—É–±—ä–µ–∫—Ç–∞: {company_status}\n"
        f"üè¢ –û–ü–§: {opf_name}\n"
        f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"üî¢ –ù–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_number}\n"
        f"üñá –î–∞—Ç–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reregistration_date}\n"
        f"üìÜ –°—Ä–æ–∫ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {company_age}\n"
    )

    response += (
        f"üÜî –ö–æ–¥ –û–ö–≠–î: {oked_code}\n"
        f"üíº –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {activity}\n"
        f"üí≤ –£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª: {business_fund}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees}\n"
        f"üè¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: {company.get('businessTypeDetail', {}).get('name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {phone}\n"
        f"üì´ Email: {email}\n\n"
        "=== –ù–∞–ª–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===\n"
        f"üìú –°—Ç–∞—Ç—É—Å –ù–î–°: {vat_status}\n"
        f"üÜî –ù–æ–º–µ—Ä —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –ù–î–°: {company.get('vatNumber', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"{risk_message}\n\n"
        "=== –í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n"
        "‚ö°Ô∏è–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        f"üî•Ô∏è–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç –Ω–∞ —Ç–æ–≤–∞—Ä–Ω–æ–º –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Ä—ã–Ω–∫–µ: {'–î–∞ ‚úÖ' if is_dominant else '–ù–µ—Ç ‚ùå'}\n\n"
        "=== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===\n"
        "‚ùå–Ø–≤–ª—è–µ—Ç—Å—è —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "üëÆ–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ –ë–ü–ò: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "‚õ©–†–µ–∑–∏–¥–µ–Ω—Ç IT PARK: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        f"‚öñÔ∏è–°—É–¥–µ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        f"üóû–õ–∏—Ü–µ–Ω–∑–∏–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        f"üõí–¢–æ—Ä–≥–æ–≤—ã–µ –∑–Ω–∞–∫–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "üë•–í–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        "=== –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ ===\n"
        f"üë§ –î–∏—Ä–µ–∫—Ç–æ—Ä: {director.get('lastName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {director.get('firstName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {director.get('middleName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞: {phone_director}\n\n"
        f"üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä: {accountant.get('lastName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {accountant.get('firstName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {accountant.get('middleName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞: {accountant_contact.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        "=== –£—á—Ä–µ–¥–∏—Ç–µ–ª–∏ ===\n"
        f"{founders_info}"
    )
    
    return response

ERROR_CHAT_ID = 6116094248  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞

async def send_alert(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": ERROR_CHAT_ID, "text": message}
    async with aiohttp.ClientSession() as session:
        await session.post(url, json=payload)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ Telegram    
async def fetch_data(url):
    """–§–µ–π–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)."""
    import asyncio
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    return {"status": "ok", "data": f"–î–∞–Ω–Ω—ã–µ —Å {url}"}
    
# –ó–∞–ø—É—Å–∫–∞–µ–º async-—Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main()
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram-–±–æ—Ç–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É —Ç–µ–±—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `Application` –∏–∑ `python-telegram-bot`:
    # app = Application.builder().token(API_TOKEN).build()
    # app.add_handler(CommandHandler("start", start))
    # await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()  # –§–∏–∫—Å –¥–ª—è Jupyter –∏ Windows
    asyncio.run(main())   # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


# Telegram-–±–æ—Ç
def main_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é."""
    keyboard = [
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Æ—Ä.–ª–∏—Ü–æ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ü"],
        ["–°—Ç–æ–∏–º–æ—Å—Ç—å", "–û—Ç—á—ë—Ç", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = [
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Æ—Ä.–ª–∏—Ü–æ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ü"],
        ["–°—Ç–æ–∏–º–æ—Å—Ç—å", "–û—Ç—á—ë—Ç", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=reply_markup)

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Polling...")
    application.run_polling()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        user_data = context.user_data
        text = update.message.text.strip()
        user_id = update.message.from_user.id
        user_name = update.message.from_user.first_name

        logger.info(f"üì¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text}")

        if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Æ—Ä.–ª–∏—Ü–æ":
            user_data["waiting_for_inn"] = True
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (9 —Ü–∏—Ñ—Ä):")
            return

        elif text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ü":
            user_data["waiting_for_pinfl"] = True
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ü–ò–ù–§–õ (14 —Ü–∏—Ñ—Ä):")
            return

        elif text == "–°—Ç–æ–∏–º–æ—Å—Ç—å":
            await update.message.reply_text("–°—Ç–æ–∏–º–æ—Å—Ç—å:\n- 100 000 —Å—É–º, –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å –æ—Ç—á—ë—Ç–æ–º, 50 000 —Å—É–º –±–µ–∑ –æ—Ç—á—ë—Ç–∞")

        elif text == "–û—Ç—á—ë—Ç":
            await update.message.reply_text("–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")

        elif text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            user_data["waiting_for_contact"] = True

        if user_data.get("waiting_for_inn"):
            if text.isdigit() and len(text) == 9:
                user_data["waiting_for_inn"] = False
                try:
                    response = await check_inn(text)
                    await send_large_message(update, response)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_inn: {e}", exc_info=True)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                 await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 9 —Ü–∏—Ñ—Ä.")
            return
            
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        if user_data.get("waiting_for_pinfl"):
            text = text.strip()
            if text.isdigit() and len(text) == 14:
                user_data["waiting_for_pinfl"] = False
                try:
                    response = await check_pinfl(text)
                    await send_large_message(update, response)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_pinfl: {e}", exc_info=True)
                    response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ü–ò–ù–§–õ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ò–ù–§–õ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 14 —Ü–∏—Ñ—Ä.")
                
        if user_data.get("waiting_for_contact"):
            logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É (ID: {OWNER_ID}): {text}")

            try:
                if not isinstance(OWNER_ID, int):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OWNER_ID - —ç—Ç–æ —á–∏—Å–ª–æ
                    logger.error("‚ùå –û—à–∏–±–∫–∞: OWNER_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                else:
                    await context.bot.send_message(
                        chat_id=OWNER_ID,
                        text=f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id})\n\n{text}"
                    )
                    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
                       
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}", exc_info=True)
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            user_data["waiting_for_contact"] = False

    except Exception as e:  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤–µ—Ä—Ö–Ω–∏–π try –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ‚úÖ –¢–µ–ø–µ—Ä—å `try:` –∑–∞–∫—Ä—ã—Ç, –∏ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å `async def main():`
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        application = ApplicationBuilder().token(TOKEN).build()
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        application.add_handler(CommandHandler("check_multibank", check_multibank))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)

if __name__ == "__main__":
    nest_asyncio.apply()  # –§–∏–∫—Å –¥–ª—è Jupyter –∏ Windows

    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ event loop
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
